// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  id_token          String? @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  isVerified      Boolean   @default(false)
  isFirstLogin    Boolean   @default(true)
  name            String?
  image           String?
  backgroundImage String?
  residesAt       String?
  message         String?
  birthday        DateTime?
  emailVerified   DateTime?
  email           String?   @unique
  username        String?   @unique

  likedTweets Like[]
  tweets      Tweet[]
  accounts    Account[]
  sessions    Session[]
}

model VerificationToken {
  identifier String
  expires    DateTime
  token      String   @unique

  @@unique([identifier, token])
}

model Tweet {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  mediaContent String?
  textContent  String?

  likes Like[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model Like {
  id String @id @default(cuid())

  likedTweet Tweet[]

  likedById String
  likedBy   User   @relation(fields: [likedById], references: [id])
}
